//@author: mburk
//@help: Draw Shadows from 1D ShadowMap
//@tags: texture
//@credits: 

Texture2D texture2d : PREVIOUS;

Texture2D shadowMap;

SamplerState linearSampler
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = WRAP;
    AddressU = WRAP;

};

float2 res;

#define PI 3.14

int lightCount = 0;

float sample(float2 coord, float r) {
    return step(r, shadowMap.Sample(linearSampler, coord.xy).r).r;
}

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};

//float4x4 tLight <string uiname="Light Transform";>;
StructuredBuffer <float4x4> tLight <string uiname="Light Transform";>;
StructuredBuffer <float4> lCol <string uiname="LightColor";>;
StructuredBuffer <float> lSize <string uiname="LightSize";>;


float4 PS(psInput input) : SV_Target
{	
	
	float4 c;
	
	for (float l = 0; l < lightCount; l += 1) {
		
		//rectangular to polar
		float2 t = mul(float4(0,0,0,1),tLight[l]).xy;
		float2 norm = float2(input.uv.x - t.x, input.uv.y + t.y) * 2.0  -1.0;
	    float theta = -atan2(norm.y, norm.x);
	    float r = length(norm); 
	    float coord = (theta + PI) / (2.0*PI);
		
		//the tex coord to samplze our 1D lookup texture 
	    //always 0.0 on y axis
	    float2 tc = float2(coord, l/lightCount);
		
		//the center tex coord, which gives us hard shadows
	    float center = sample(tc, r);    
		
		//we multiply the blur amount by our distance from center
	    //this leads to more blurriness as the shadow "fades away"
	    float blur = (1/res.x)  * smoothstep(.1, 1, r);
		
		//now we use a simple gaussian blur
	    float sum = 0;
	
	    sum += sample(float2(tc.x - 4.0*blur, tc.y), r) * 0.05;
	    sum += sample(float2(tc.x - 3.0*blur, tc.y), r) * 0.09;
	    sum += sample(float2(tc.x - 2.0*blur, tc.y), r) * 0.12;
	    sum += sample(float2(tc.x - 1.0*blur, tc.y), r) * 0.15;
	
	    sum += center * 0.16;
	
	    sum += sample(float2(tc.x + 1.0*blur, tc.y), r) * 0.15;
	    sum += sample(float2(tc.x + 2.0*blur, tc.y), r) * 0.12;
	    sum += sample(float2(tc.x + 3.0*blur, tc.y), r) * 0.09;
	    sum += sample(float2(tc.x + 4.0*blur, tc.y), r) * 0.05;
		
	
//		c += float4(lCol[l].rgb, sum * smoothstep(1, .1, r));
		c += float4(float3(1,1,1), sum * smoothstep(lSize[l], .1, r));	
		
//		float3 col = mul(lCol[l].rgb,0);
//		c += float4(	lCol[l].r * sum * smoothstep(lSize[l], .1, r),
//						lCol[l].g * sum * smoothstep(lSize[l], .1, r),
//						lCol[l].b * sum * smoothstep(lSize[l], .1, r),
//						sum * smoothstep(lSize[l], .1, r));

//		float3 col = lCol[l].rgb;
//		c += float4(	sum * smoothstep(lCol[l].r, .1, r),
//						sum * smoothstep(lCol[l].g, .1, r),
//						sum * smoothstep(lCol[l].b, .1, r),
//						sum * smoothstep(lSize[l], .1, r));

	}
	
	return c;
	
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}